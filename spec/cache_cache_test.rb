require "cache_cache"

describe Rails::CacheCache do
  before(:each) do
    @cc = Rails::CacheCache.new    
  end

  it 'test default group' do
    @cc.group.should == :default
  end

  it 'test custom group' do
    @cc.group(:custom)
    @cc.group.should == :custom
  end

  it 'test cache function with an empty entry' do
    @cc.cache
    @cc.cache.should == [  ]
  end

  it 'test cache function with an string entry' do
    @cc.cache('/index.html')
    @cc.cache.should == [ "/index.html" ]
  end

  it 'test cache function with an array entry' do
    @cc.cache(['/index.html', '/product.html'])
    @cc.cache(['/contact.html', '/about.html'])
    @cc.cache.should == [ "/index.html", '/product.html', '/contact.html', '/about.html' ]
  end

  it 'test network function with an empty entry' do
    @cc.network
    @cc.network.should == [  ]
  end

  it 'test network function with an string entry' do
    @cc.network('*')
    @cc.network.should == [ "*" ]
  end

  it 'test network function with an array entry' do
    @cc.network(['/index.html', '/product.html'])
    @cc.network(['/contact.html', '/about.html'])
    @cc.network.should == [ "/index.html", '/product.html', '/contact.html', '/about.html' ]
  end

  it 'test fallback function with an empty entry' do
    @cc.fallback
    @cc.fallback.should == [  ]
  end

  it 'test fallback function with an string entry' do
    @cc.fallback('/error.html')
    @cc.fallback.should == [ '/error.html' ]
  end

  it 'test fallback function with an array entry' do
    @cc.fallback(['/index.html', '/product.html'])
    @cc.fallback(['/contact.html', '/about.html'])
    @cc.fallback.should == [ "/index.html", '/product.html', '/contact.html', '/about.html' ]
  end

  it 'test to_s function' do
    @cc.cache('/index.html')
    @cc.network('*')
    @cc.fallback('/error.html')

    @cc.to_s.should == 
"CACHE MANIFEST
# generated by cache_cache
CACHE:
/index.html
NETWORK:
*
FALLBACK:
/error.html"
  end

  it 'test label function' do
    @cc.label.should == 'cache_cache_default'
  end

  it 'test spoor function' do
    @cc.spoor.should == '# generated by cache_cache'
  end

  it 'test generate function' do
    @cc.cache(['/index.html', '/product.html'])
    @cc.network('*')
    @cc.fallback('/error.html')

    @cc.generate.should == 
"CACHE MANIFEST
# generated by cache_cache
CACHE:
/index.html
/product.html
NETWORK:
*
FALLBACK:
/error.html"
  end

  it 'test block contructor function' do
    cc = Rails::CacheCache.new do
      cache(['/index.html', '/product.html'])
      network('*')
      fallback('/error.html')
    end

    cc.to_s.should == 
"CACHE MANIFEST
# generated by cache_cache
CACHE:
/index.html
/product.html
NETWORK:
*
FALLBACK:
/error.html"    
  end

  it 'test configure function' do
    @cc.configure do
      cache(['/index.html', '/product.html'])
      network('*')
      fallback('/error.html')
    end

    @cc.to_s.should == 
"CACHE MANIFEST
# generated by cache_cache
CACHE:
/index.html
/product.html
NETWORK:
*
FALLBACK:
/error.html"    
  end

  it 'test cached function' do
    @cc.cached.should be_nil
  end
end
