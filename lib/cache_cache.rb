module Rails

  # CacheCache allow you to manage dynamically multiple groups of HTML5 manifests.
  # CacheCache use rails cache to store generated manifests.
  #
  class CacheCache

    # Constructor
    #
    def initialize(options = {}, &block)
      @memory_store = options.fetch(:memory_store, ActiveSupport::Cache::MemoryStore.new) 
      @group = options.fetch(:group, :default)

      @cache = { }
      @network = { }
      @fallback = { }

      self.configure(&block) if block_given?
    end

    # Configure
    #
    def configure(&block)
      instance_eval(&block)
    end

    # Get / Set an entry into the cache section of the manifest
    #
    def cache(entry = nil)
      unless entry.nil?
        @cache[@group] ||= []
        @cache[@group] << entry
      end

      @cache[@group]
    end

    # Get / Set an entry into the network section of the manifest
    #
    def network(entry = nil)
      unless entry.nil?
        @network[@group] ||= []
        @network[@group] << entry
      end

      @network[@group]
    end

    # Get / Set an entry into the fallback section of the manifest
    #
    def fallback(entry = nil)
      unless entry.nil?
        @fallback[@group] ||= []
        @fallback[@group] << entry
      end

      @fallback[@group]
    end

    # Save the current manifest
    #
    def save
      @memory_store.write(self.label, self.manifest)
    end

    # Get the manifest
    #
    def manifest
      return (@memory_store.read(self.label) or self.generate)
    end

    # Generate the manifest
    #
    def generate
      [
        'CACHE MANIFEST'  ,
        self.spoor        ,
        'CACHE:'          ,
        self.cache        ,
        'NETWORK:'        ,
        self.network      ,
        'FALLBACK:'       ,
        self.fallback     ,
      ].join("\n")
    end

    # Get / Set the current group
    #
    def group(group_name = nil)
      @group = group_name unless group_name.nil?
      @group
    end

    # Get the spoor of the manifest
    #
    def spoor
      "# generated by cache_cache"
    end

    # Get label
    #
    def label
      "cache_cache_#{@group}"
    end

    # Get the manifest
    #
    def to_s
      self.manifest
    end
  end
end